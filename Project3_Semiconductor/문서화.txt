시도해본것: 
데이터 전처리
데이터 증식



요약:
데이터 전처리:
얼마나 작은 차이들까지 오류로 정의할지 정립되지 않았고 그래서 필터에 파라미터를 결정하지 못했음
이미지에 국소적인 밝기차이를 없에는것은 정확도에 영향을 주지 않았거나 미미한것으로 보임 
따라서 전처리는 보류됬으나 개선의 여지는 있음

데이터 증식:
정상데이터 : 성공적이지는 않으나 큰문제없이 증식됨
이물질 데이터 : 성공적으로 진행되어서 이물질 인식률을 높이는대 기여됨
전체 데이터: 개선에 여지가 있어보이나 그러기에는 시간이 부족함






데이터 전처리:


	개요:
	기존에 데이터에서 오류에 관련된 정보만 남김으로 좀 더 학습의 정확도를 높여보고자 함	


	과정:
	HSV채널을 이용한 이미지 밝기 균일화(국소적인 밝기의 차이를 제거)
	양방향필터를 이용한 너무 작은 오류 데이터의 제거
	사이즈 균일화(640)

	결과:
	밝기를 균일하게 해준것에는 의미가 없어보임.
	
	양방향 필터는 사용해볼 여지가 남아있기는 하였으나, 
	희미한 오류데이터에 대하여 기준이 명확하게 정립되지 못하였고, 
	따라서 필터값도 결정되지 않았음으로 보류됨

	사이즈를 균일화하는것은 빠른 학습속도를 가지고 오기는 하였으나
	그 과정에서 작은 오류(s_point)에 대해서 yolo가 확신하지 못했음 (3픽셀 미만의 크기는 경고발생)
	따라서 이미지 크기를 작게 균일화하는것보다 크게 균일화하는것이 좋아보임
	이러한 결론을 바탕으로 학습할때는 이미지 사이즈를 1200으로 주었음
	


데이터 증식:

	1. 정상데이터 증식
	
		개요:
		전체 데이터중 오류가 하나도 없는 이미지의 수는 적었음
		정상 반도체 데이터는 당장 학습에는 필요 없을수있지만
		나중에 실전처럼 테스트 해볼때나, 오류 이미지를 합성하여
		새로운 데이터를 만들 때는 유용하게 사용할수 있음

		과정:
		정상반도체데이터 이미지만 모으기

		배경만 추출해보기: 이미지 전체에 블러를 굉장히 높은 파라미터로 주었음
		그결과 회로에 대한 정보는 손상되고 전체적인 밝기에 대한 정보만 남았음

		회로만 추출해보기: 원본이미지에서 배경이미지값을 빼면 주변픽셀에 비하여 상대적으로
		높은 픽셀값을 가지는 회로에 대한 정보만 크게 남음. 
		그 이미지를 이진화하고 이미지 임계처리를 하여서 생긴 데이터를 마스크로 
		원본에서 회로부분만 가지고왔음

		배경과 회로 합치기:
		배경과 회로를 같은공간에 붙히면 결국 기존에 이미지와 차이가 굉장히 적어짐
		따라서 회로이미지에 외곽부분을 40픽셀씩 자르고, 
		기존에 배경이미지에 랜덤한 위치에 합성하였음

		결과:
		회로이미지의 배경값을 날린다고 날렸지만 일부 노이즈가 남아있었고, 
		따라서 배경이미지와 합성하였을때 어색한 부분이 발생하였음
		그러나 원래이미지에서 노이즈로 판단하는 부분이 발생하거나 원본이미지와
		동떨어진 데이터를 생성하는것은 아니였기에 그냥 진행함
			
		


	2. 이물질 증식
		
		개요: 
		학습을 반복할때 이물질에 대한 인식률은 굉장히 낮게 나왔고, 그 원인으로
		이물질데이터가 너무 적어서 그렇다는 가정을 도출함. 이를 해결하려면 
		이물질이 들어간 이미지를 증가시켜볼 필요성이 있었음

		과정:
		이물질이 있는 반도체이미지에서 이물질이 있는 부분들만 잘라냄
		그렇게 생성한 이미지를 아핀 변환과 회전을 시켜서 증식한 정상이미지와 합성하였음

		결과:
		기존에 매우 적던 이물질 이미지를 증식해주자 이물질에 대한 인식률이 크게 높아졌음

		


	3. 전체오류 증식

		개요:
		이물질 데이터 증식으로 인한 효과를 크게 보았음. 따라서 
		따라서 '오류데이터들을 증식해주면 인식률이 높아진다' 가정을 세워보았고
		시도해봄
		이를 통하여서 일관되지 않은 라벨링도 통일시킬수있을거라고 생각했음

		과정:
		이물질 증식과정과 비슷함. 단, 이번에는 오류이미지가 충분하다고 생각하여서 아핀변환은
		하지 않았음, 또한 이미지를 합성하는 과정에서 좌표데이터를 yolov5에서 학습가능한 
		라벨링의 형태로 저장하는 코드를 추가하였음

		결과:
		생성된 이미지로 모델을 학습하면 생성된이미지에 대한 인식률수치는 굉장히 높았지만
		공장에서 실제로 촬영된 이미지들에 대한 인식률수치는 낮았음
		실제로 인식한 이미지를 시각화시켜서 보자 인식자체는 나쁘지 않게 되었던것같음 하지만
		해당 문제에 대한 원인과 결과를 파악하기에는 시간이 부족함 
		하지만 몇가지 가설은 세워봄
		
		가설 1:  과적합:

			1-1: 오류이미지의 배경이 과적합?
			단순하게 이미지만 보았을때는 회로이미지의 배경이 이미지에 큰 영향을 끼치긴하였으나
			오류이미지의 배경은 전체이미지에서 두드러지게 확인되지 않는것으로 보였음.
			그러나 레이어를 거치면서 배경정보 또한 학습되었을수도있음

			1-2: 변환을 주지않음?
			기존에 이물질 증식을 진행할때는 아핀변환과 회전을 통하여 변화를 시켜줬으나 이번엔
			그런것이 없이 기존이미지에 일부를 그대로 붙혔음. 이는 오류의 모양에 대한 과적합의
			원인이 될수있음 따라서 똑같은 이미지를 이용하여 생성된 증식데이터에는 높은 
			정확도를 보여줄수있으나 그렇지 않은 데이터에는 낮은 정확도를 보여줄수도 있을것임

			증명 방법:
			이물질데이터와같이 아핀변환과 회전을 주고 다시해보면됨. 그과정에서 모양에 대한 과적합은
			해결될것이고, 배경또한 일부가 변환되고 잘리기에 학습될 가능성이 적음
			

		가설 2: 레이블링과정에서 발생한 차이:
			
			기존에 학습하던 데이터에 레이블값은 모두 로보플로우만 이용하여서 생성함.
			그러나 새롭게 만든 증식데이터의 레이블값은 openCV를 이용하여 이미지를
			합성하는 과정에서 좌표데이터를 기반으로 레이블값을 생성하였음.
			최종 정확도 측정(Test DataSet)은 로보플로우를 이용하여 생성한 값을 이용했음

			증명방법:
			만약 증식으로 생성한 모델도 실제데이터를 돌려보고 수작업으로 확인해본다면
			꽤 높은 정확도를 보여줄수도있음
			

			

